import { schedulerCallback } from "scheduler/src/forks/Schduler";
import { beginWork } from "./ReactFiberBeginWork";
import { createWorkInProgress } from "./ReactFiber";
import { completeWork } from "./ReactFiberCompleteWork";
import { ChildDeletion, MutationMask, NoFlags, Placement, Update } from "./ReactFiberFlags";
import { commitMutationEffectsOnFiber } from "./ReactFiberCommitWork";
import { FunctionComponent, HostComponent, HostRoot, HostText } from "./ReactWorkTags";
import { finishQueueingConcurrentUpdates } from "./ReactFiberConcurrentUpdates";

let workInProgress = null;
let workInPorgressRoot = null;

/**
 * ËÆ°ÂàíÊõ¥Êñ∞root
 * Ê∫êÁ†Å‰∏≠Ê≠§Â§ÑÊúâ‰ªªÂä°Ë∞ÉÂ∫¶ÁöÑÂäüËÉΩ
 * @param {*} root 
 */
export function schedulerUpdateOnFiber(root) {
  // Á°Æ‰øùË∞ÉÂ∫¶ÊâßË°åroot‰∏äÁöÑÊõ¥Êñ∞
  ensureRootIsScheduled(root);
}
function ensureRootIsScheduled(root) {
  // ÊØèÊ¨°Êõ¥Êñ∞Êó∂Â∞ÜworkInPorgressRootËµãÂÄº‰∏∫rootÔºåcommitÂÆåÊàêÂêéÊ∏ÖÁ©∫
  // ËøôÊ†∑ÂèØ‰ª•ËææÂà∞ÊâπÈáèÊõ¥Êñ∞ÁöÑÊïàÊûúÔºåÂç≥Êõ¥Êñ∞Âë®ÊúüÂÜÖÂè™ÊâßË°å‰∏ÄÊ¨°
  if (workInPorgressRoot) return;
  workInPorgressRoot = root;
  // ÂëäËØâÊµèËßàÂô®Ë¶ÅÊâßË°åperformanceConcurrentWorkOnRootÔºåÂèÇÊï∞Â∞±‰∏∫root
  schedulerCallback(performanceConcurrentWorkOnRoot.bind(null, root));
}
/**
 * Ê†πÊçÆfiberÊûÑÂª∫fiberÊ†ëÔºåÂàõÂª∫ÁúüÂÆûÁöÑDOMËäÇÁÇπÔºåËøòÈúÄË¶ÅÊääÁúüÂÆûÁöÑDOMËäÇÁÇπÊèíÂÖ•ÂÆπÂô®
 * @param {*} root 
 */
function performanceConcurrentWorkOnRoot(root) {
  debugger
  // Á¨¨‰∏ÄÊ¨°Ê∏≤Êüì‰ª•ÂêåÊ≠•ÁöÑÊñπÂºèÊ∏≤ÊüìÊ†πËäÇÁÇπÔºåÂàùÊ¨°Ê∏≤ÊüìÁöÑÊó∂ÂÄôÔºåÈÉΩÊòØÂêåÊ≠•
  renderRootSync(root);
  // console.log(root, 'root----')
  // ÂºÄÂßãËøõÂÖ•Êèê‰∫§Èò∂ÊÆµÔºå‰πüÂ∞±ÊòØÊâßË°åÂâØ‰ΩúÁî®Ôºå‰øÆÊîπÁúüÂÆûDOM
  const finishedWork = root.current.alternate; // ÊãøÂà∞ÊûÑÂª∫ÂÆåÊàêÁöÑÊñ∞fiber
  root.finishedWork = finishedWork;
  commitRoot(root);
  workInPorgressRoot = null;
}

function commitRoot(root) {
  const { finishedWork } = root;
  printFinishedWork(finishedWork);
  // Âà§Êñ≠Â≠êÊ†ëÊúâÊ≤°ÊúâÂâØ‰ΩúÁî®
  const subtreeFlags = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
  // Âà§Êñ≠Ëá™Â∑±ÊòØÂê¶ÊúâÂâØ‰ΩúÁî®
  const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
  // Â¶ÇÊûúËá™Â∑±ÊàñËÄÖÂ≠êËäÇÁÇπÊúâÂâØ‰ΩúÁî®ÔºåÂ∞±ÊâßË°åÊìç‰Ωú
  if (subtreeFlags || rootHasEffect) {
    // console.log('commitRoot', finishedWork.child);
    commitMutationEffectsOnFiber(finishedWork, root);
  }
  // ÊâßË°åÂÆåÊàêÂêéÔºå
  root.current = finishedWork;
}

function renderRootSync(root) {
  // ÂºÄÂßãÊûÑÂª∫fiberÊ†ë
  prepareFreshStack(root);
  workLoopSync();
}

function prepareFreshStack(root) {
  // root.currentÊåáÁöÑÊòØËÄÅÁöÑÊ†πfiber
  workInProgress = createWorkInProgress(root.current, null);
  finishQueueingConcurrentUpdates();
}
// ÂºÄÂßãÂêåÊ≠•Â∑•‰ΩúÂæ™ÁéØ
function workLoopSync() {
  // console.log("üöÄ ~ workLoopSync ~ workInProgress:", workInProgress)
  while (workInProgress !== null) {
    performanceUnit(workInProgress);
  }
}

/**
 * ÊâßË°å‰∏Ä‰∏™Â∑•‰ΩúÂçïÂÖÉ 
 * @param {*} unitOfWork 
 */
function performanceUnit(unitOfWork) {
  // Ëé∑ÂèñÊñ∞fiberÂØπÂ∫îÁöÑËÄÅfiber
  const current = unitOfWork.alternate;
  // ÂÆåÊàêÂΩìÂâçfiberÁöÑÂ≠êfiberÈìæË°®ÊûÑÂª∫Âêé
  const next = beginWork(current, unitOfWork);
  unitOfWork.memoizedProps = unitOfWork.pendingProps;
  if (next === null || next === undefined) { // Â¶ÇÊûúÊ≤°ÊúâÂ≠êËäÇÁÇπË°®Á§∫ÂΩìÂâçfiberÂ∑≤ÁªèÂÆåÊàê‰∫Ü
    workInProgress = null;
    completeUnitOfWork(unitOfWork);
  } else {
    workInProgress = next;
  }
}

function completeUnitOfWork(unitOfWork) {
  let completedWork = unitOfWork;
  do {
    const current = unitOfWork.alternate;
    const returnFiber = completedWork.return;
    // ÊâßË°åÊ≠§fiberÁöÑÂÆåÊàêÂ∑•‰Ωú
    // Â¶ÇÊûúÊòØÂéüÁîüÁªÑ‰ª∂ÔºåÂ∞±ÊòØÂàõÂª∫ÂØπÂ∫îÁöÑÁúüÂÆûDOMËäÇÁÇπ
    completeWork(current, completedWork);
    // Â¶ÇÊûúÊúâÂºüÂºüÔºåÂ∞±ÊûÑÂª∫ÂºüÂºüÁöÑfiber
    const siblingFiber = completedWork.sibling;
    if (siblingFiber !== null) {
      workInProgress = siblingFiber;
      return;
    }
    // Â¶ÇÊûúÊ≤°ÊúâÂºüÂºüÔºåËØ¥ÊòéÂΩìÂâçÂÆåÊàêÁöÑÊòØÁà∂fiberÁöÑÊúÄÂêé‰∏Ä‰∏™ËäÇÁÇπ
    // Ê†áÂøóÂÆÉÁöÑÁà∂‰∫≤Â∑≤ÁªèÂÆåÊàê‰∫Ü
    completedWork = returnFiber;
    workInProgress = completedWork;
  } while (completedWork !== null);
}

function printFinishedWork(fiber) {
  let { child, deletions, flags } = fiber;
  if ((flags & ChildDeletion) !== NoFlags) {
     fiber.flags &= (~ChildDeletion);
    console.log("Â≠êËäÇÁÇπÂà†Èô§" + deletions.map(item => `${item.type}#${item.memoizedProps.id}`).join(''));
  }
  while (child) {
    printFinishedWork(child);
    child = child.sibling;
  }
  if (fiber.flags !== NoFlags) {
    console.log(getFlags(fiber), getTag(fiber.tag), typeof fiber.type === 'function' ? fiber.type.name: fiber.type, 'FinishedWork----');
  }
}

function getTag(tag) {
  switch (tag) {
    case HostRoot:
      return 'HostRoot';
    case HostComponent:
      return 'HostComponent';
    case HostText:
      return 'HostText';
    case FunctionComponent:
      return 'FunctionComponent'
    default:
      return tag;
  }
}

function getFlags(fiber) {
  const {flags, deletions } = fiber;
  if (flags === Placement) {
    return 'ÊèíÂÖ•'
  } else if (flags === Update) {
    return 'Êõ¥Êñ∞'
  } 

  return flags;
}